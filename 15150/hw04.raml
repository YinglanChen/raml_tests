(* tree definition *)
type tree =
  Empty
| Node of int * tree * tree;;

(* Task 1.1
 * part : int * int list -> int list * int list 
 * REQUIRES: true
 * ENSURES: part(x,L) ==> a pair of lists (A,B) such that
 *          A consists of the items in L that are less than x
 *      and B consists of the items in L that are greater than or equal to x
 *)
let rec part ((x,l): int * int list): (int list * int list) =
  match l with 
   | [] -> ([],[])
   | y::r -> let (a,b) = part (x,r)
             in if (y<x) then (y::a,b) else (a,y::b)

(* Tests for part *)
(* let _ = assert ( ([],[]) = part (0,[]) )
let _ = assert ( ([],[1]) = part (1,[1]))
let _ = assert ( ([],[4]) = part (1,[4]))
let _ = assert ( ([4],[]) = part (10,[4]))
let _ = assert ( ([4;3;2;1],[5;6;7;8;9]) = part (5,[4;3;2;1;5;6;7;8;9]))
let _ = assert ( ([2;4;6;8],[10;12]) = part (9,[2;4;6;8;10;12]))
let _ = assert ( ([],[1;2;3;4;5]) = part (-1,[1;2;3;4;5]))
let _ = assert ( ([-1;-2;-3],[])= part (0,[-1;-2;-3])) *)

(* Task 1.2
 * quicksort : int list -> int list
 * REQUIRES: true
 * ENSURES: quicksort(L) returns a sorted permutation of L
 *)
let rec quicksort (l: int list) : int list = 
  match l with 
  | [] -> [] 
  | (x::l') -> let (less, greater) = part(x,l') 
              in quicksort(less) @ (x :: quicksort(greater))

(* Tests for quicksort *)
(* let _ = assert ([] = quicksort []) 
let _ = assert ([1] = quicksort [1])
let _ = assert ([-1] = quicksort [-1])
let _ = assert ([1;2] = quicksort [1;2])
let _ = assert ([1;2;3] = quicksort [3;1;2])
let _ = assert ([2;3;5;7;11;13] = quicksort [7;2;5;13;3;11]) *)

(* sorted : int list -> bool
 * REQUIRES: true
 * ENSURES: sorted L ==> true if L is <-sorted
 *                   ==> false otherwise
 *)
let rec sorted (l: int list) : bool = 
  match l with 
  | [] -> true  
  | x::[] -> true 
  | x::y::l' -> (x <= y) && sorted(y::l')
(* 
let _ = assert (sorted(quicksort([7;2;5;13;3;11])))
let _ = assert (sorted(quicksort([105;103;101])))
 *)
(* Task 1.3
 * quicktree : int list -> tree
 * REQUIRES: true
 * ENSURES: quicktree(L) returns a tree T such that
            treeToList(T) equals to quicksort(L)
 *)
let rec quicktree (l: int list) = 
  match l with 
  | [] -> Empty 
  | x::l' -> let (less, greater) = part (x, l') 
             in Node (x, quicktree(less), quicktree(greater))

(* Tests for quicktree *)
(* let _ = assert( Empty = quicktree [])
let _ = assert( Node(Empty,1,Empty) = quicktree [1])
let _ = assert( Node(Empty,1,Node(Empty,2,Node(Empty,3,Empty)))= quicktree [1;2;3])
let _ = assert( Node(Node(Empty,1,Node(Empty,2,Empty)),3,Empty)=quicktree[3;1;2]) *)

(* Task 2.1
 * countNonZero : tree -> int
 * REQUIRES: true
 * ENSURES: countNonZero(t) returns the number of nodes with nonzero value
 *          in tree t
 *)
let rec countNonZero (t: tree) : int = 
  match t with 
  | Empty -> 0 
  | Node (x, t1, t2) -> let n = if x<>0 then 1 else 0 
                       in n + countNonZero(t1) + countNonZero(t2)
  
(* Tests for countNonZero *)
(* let _ = assert( 0 = countNonZero Empty)
let _ = assert( 0 = countNonZero(Node(Empty,0,Empty)))
let _ = assert( 1 = countNonZero(Node(Empty,1,Empty)))
let _ = assert( 3 = countNonZero(Node(Node(Empty,1,Empty),3,Node(Empty,2,Empty))))
 *)

(* Task 2.2
 * lca : tree -> tree
 * REQUIRES: the input tree only has two nonzero nodes
 * ENSURES: lca(t) returns the smallest subtree
 *  which contains both nonzero nodes
 *)
let rec lca (t: tree) : tree = 
  match t with 
  | Empty -> Empty
  | Node(x,t1,t2) -> 
    if x <> 0 then Node(x,t1,t2) else
    if countNonZero(t1)=1 && countNonZero(t2)=1 then Node(x,t1,t2) else    
    if countNonZero(t2)=2 then lca(t2) else lca(t1)

(* Tests for lca *)
(* let _ = assert ( Node(Empty,1,Node(Empty,2,Empty)) = lca(Node(Empty,1,Node(Empty,2,Empty))))
let _ = assert ( Node(Empty,1,Node(Empty,2,Empty)) =
    lca(Node(Node(Empty,0,Empty),0,Node(Empty,1,Node(Empty,2,Empty)))))
let t = Node(Node(Empty,1,Empty),0,Node(Empty,2,Empty))
let _ = assert ( t = lca(Node(Node(Empty,0,Empty),0,t)))
let _ = assert ( t = lca(Node(t,0,Node(Empty,0,Empty))))
 *)
(* Task 2.3*)
(* depth: tree * int -> int option
 * REQUIRES: the input tree only has two nonzero nodes, which are 1 and 2
 * ENSURES: depth(t,n) returns Some d such that d is the depth
 *          between node n and root of t, if such n exists
 *          returns None otherwise
*)
 
let rec depth ((t, n) : tree * int) : int option = 
  match t with 
  | Empty -> None
  | Node(x,t1,t2) -> if x=n then Some 0 else
      ( match depth(t1,n) with
      | Some i -> Some (i+1)
      | None   -> (match depth(t2,n) with
          | Some i -> Some(i+1)
          | None -> None))

(* Tests for depth *)
(* let _ = assert( None = depth(Empty,1))
let _ = assert( Some 0 = depth(Node(Empty,1,Node(Empty,2,Empty)),1))
let _ = assert( Some 1 = depth(Node(Empty,1,Node(Empty,2,Empty)),2)) *)

(*
 * distance : tree -> int
 * REQUIRES: the input tree only has two nonzero nodes, which are 1 and 2
 * ENSURES: distance(t) returns the distance between the two  nonzero nodes
 *          of that tree
 *)

let distance (t : tree) : int = 
  let Some d1 = depth(lca(t),1) in
  let Some d2 = depth(lca(t),2) in 
  d1 + d2

(* (* Tests for distance *)
let _ = assert( 1 = distance(Node(Empty,1,Node(Empty,2,Empty))))
let _ = assert( 2 = distance(Node(Node(Empty,1,Empty),0,Node(Empty,2,Empty)))) *)


(* Task 5.1
 * treecompare : tree * tree -> order
 * REQUIRES: true
 * ENSURES: treecompare(t1,t2) returns LESS if t1 has a smaller value
 *          at the root node, GREATER if t1 has a bigger value at theroot node,
 *          EQUAL if t1 and t2 have same root node value
 *          Empty tree is always smaller than every nonempty tree
 *)

(* modification 12/09/2019
 * Ocaml does not have order type 
 * so I encode 0 as equal, -1 if less, 1 if greater, as caml int lib does 
 *)
let treecompare ((t1,t2): tree * tree) : int = 
    match (t1, t2) with 
  | (Empty, Empty) -> 0
  | (Empty, _)     -> -1
  | (_,     Empty) -> 1
  | (Node(x1,l1,r1),Node(x2,l2,r2)) -> if (x1=x2) then 0 else if (x1<x2) then -1 else 1 


(* Tests for treecompare *)
(*val EQUAL = treecompare(Empty,Empty)
val LESS = treecompare(Empty,Node(Empty,1,Empty))
val GREATER = treecompare(Node(Empty,~1,Empty),Empty)
val EQUAL = treecompare(Node(Empty,5,Empty),Node(Empty,5,Empty))
val LESS = treecompare(Node(Empty,4,Empty),Node(Empty,5,Empty))
val GREATER = treecompare(Node(Empty,5,Empty),Node(Empty,0,Empty))
val a = Node(Node(Empty, 7, Empty), 3, Empty)
val b = Node(Empty, 4, Empty)
val LESS = treecompare(a, b)*)
(* let _ = assert ( 0 = treecompare(Empty,Empty) )
let _ = assert ( -1 = treecompare(Empty,Node(Empty,1,Empty)) )
let _ = assert ( 1 = treecompare(Node(Empty,-1,Empty),Empty) )
let _ = assert ( 0 = treecompare(Node(Empty,5,Empty),Node(Empty,5,Empty)) )
let _ = assert ( -1 = treecompare(Node(Empty,4,Empty),Node(Empty,5,Empty)) )
let _ = assert ( 1 = treecompare(Node(Empty,5,Empty),Node(Empty,0,Empty)) )
let a = Node(Node(Empty, 7, Empty), 3, Empty)
let b = Node(Empty, 4, Empty) 
let _ = assert ( -1 = treecompare(a, b) ) *)


(* Task 5.2
 * swapDown : tree -> tree
 * REQUIRES: if t is non-empty,the subtrees of t are both maxheaps
 * ENSURES: swapDown(t) ==> returns t if t is Empty,
 *                         otherwise returns a maxheap
 *               containing exactly the elements in t.
 *)
let rec swapDown (t : tree) : tree = 
  match t with 
  | Empty -> Empty
  | Node(x,l,r) -> 
      if treecompare(l,r) = 1 then
        if treecompare(t,l)= -1 
        then let Node(xl,l1,l2) = l in Node(xl,swapDown(Node(x,l1,l2)),r)
        else t
    else  if treecompare(t,r)= -1 then
          let Node(xr,r1,r2) = r
          in Node(xr,l,swapDown(Node(x,r1,r2)))
          else t

(* Tests for swapDown *)
(* let _ = assert( Empty = swapDown Empty)
let _ = assert( Node(Empty,2,Node(Empty,1,Empty)) = 
    swapDown(Node(Empty,1,Node(Empty,2,Empty))))
let a = Node(Node(Empty, 7, Empty), 3, Empty)
let b = Node(Empty, 4, Empty)
let _ = assert( Node(a,4,Node(Empty,0,Empty)) = swapDown(Node(a,0,b))) *)


(* Task 5.3
 * heapify : tree -> tree
 * REQUIRES: true
 * ENSURES: heapify(t) evalutes to a maxheap with exactly the elements of t
 *)
let rec heapify (t : tree) : tree = 
    match t with 
  | Empty -> Empty
  | Node(x,l,r) -> swapDown(Node(x,heapify(l),heapify(r)))

(* Tests for heapify *)
(* let _ = assert (Empty = heapify Empty)
let _ = assert (Node(Empty,1,Empty) = heapify( Node(Empty,1,Empty)))
let _ = assert (Node(Empty,2,Node(Empty,1,Empty)) =
    heapify(Node(Empty,1,Node(Empty,2,Empty))))
let t1 = Node(Node(Empty,2,Empty),0,Node(Empty,2,Empty))
let t2 = Node(Node(Empty,2,Empty),2,Node(Empty,0,Empty))
let test = Node(t1,1,Node(Empty,3,Empty))
let _ = assert (Node(t2,3,Node(Empty,1,Empty)) = heapify(test)) *)
let _ = heapify Empty;