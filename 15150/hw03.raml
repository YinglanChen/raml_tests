(* ---------------------------------------------------------------------- *)
(* SECTION 2 *)

(* take : int * int list -> int list * int list
 * rEQUIrES: 0 <= i <= length l
 * ENSUrES: take (i, l) = a pair of lists (a, b) such that
 *          a consists of the first i elements from l, and a @ b = l 
 *)
let rec take ((i : int), (l : int list)) : int list * int list =
    if i = 0 then ([], l) else
      match l with
      | [] -> ([], [])
      | x::r -> let (a, b) = take (i - 1, r) in (x::a, b)

(* bake : int * int list -> int list * int list
 * rEQUIrES: 0 <= i <= length l
 * ENSUrES: bake (i, l) = a pair of lists (a, b) such that
 * a consists of i-many the first element of l, and b=l
 *)
let bake ((i : int), (l : int list)) : int list * int list =
    if i = 0 then ([], l) else
      match l with
      | [] -> ([], [])
      | x::r -> let (a, b) = take (i - 1, l) in (x::a, b)

(* ---------------------------------------------------------------------- *)
(* SECTION 3 *)

(* Task 3.1: Implement and document this function. *)
(* take_work: int * int list -> int
 * rEQUIrES: 0 <= i <= length l
 * ENSUrES: take_work(i,l) evaluates to the total number of :: operations
 *          used to evaluate take(i,l)
*)
let rec take_work ((i : int), (l : int list)) : int =
  if i = 0 then 0 else
     match l with
     | []   -> 0
     | x::r -> take_work(i-1,r)+1 

(* ---------------------------------------------------------------------- *)
(* SECTION 4 *)

(* Task 4.1: Implement and document this function. *)
(* heads: int * int list -> int *)
(* rEQUIrES: true *)
(* ENSUrES: heads(x , l) evaluates to the number of occurences of x *)
(*          at the front of l *)

let rec heads((x : int), (l: int list)): int = 
  match l with 
  | [] -> 0
  | xs :: r -> if x = xs then 1 + heads(x,r) else 0

(* TESTING *)
let _ = heads(1,[1;1;2;1;3]) 
let _ = heads(2,[1;1;2;1;3])
let _ = heads(1,[])

(* Task 4.2: Implement and document this function. *)
(* tails: int * int list -> int list
 * rEQUIrES: true 
 * ENSUrES: tails(x, l) evaluates to the list obtained from l 
 * by deleting initial occurrences of x, if any 
 *)

let rec tails ((x : int), (l: int list)): int list = 
    if heads(x,l) = 0 then l 
    else let (_::r) = l in tails(x,r) 

(* TESTING *)
(* val [2,1,3] = tails (1,[1,1,2,1,3])
val [1,1,2,1,3] = tails (2,[1,1,2,1,3])
val [] = tails(5,[])
val [] = tails(1,[1,1,1,1,1]) *)

(* Task 4.3: Implement and document this function. *)
(* filterInt: int * int -> int list *)
(* rEQUIrES: true*)
(* ENSUrES: filterInt(x,l) evaluates to the list obtained from l
 * by deleting all occurrences of x in l *)
let rec filterInt((x:int),(l:int list)) = 
  match l with 
  | [] -> []
  | a::r -> if heads(x,l) = 0 then a :: filterInt(x,r)
           else filterInt(x, tails(x,l))
(* TESTING *)
(* val [2,3] = filterInt (1, [1,1,2,1,3])
val [1,1,1,3] =  filterInt (2, [1,1,2,1,3])
val [1,5,1,5,0] = filterInt (3, [1,5,1,5,0]) *)
(* ---------------------------------------------------------------------- *)
(* SECTION 5 *)

(* Task 5.1: Implement and document this function. *)
(* look_and_say : int list -> int list *)
(* rEQUIrES: true *)
(* ENSUrES: look_and_say(s) evaluates to the list obtained from s
 *  by reading off adjacent groups of identical elements in s*)

let rec look_and_say(l:int list): int list = 
    match l with 
  | [] -> []
  | x::xs -> heads(x,x::xs)::x::look_and_say(tails(x,x::xs))

(* TESTING *)
(* val [] = look_and_say([])
val [3,2] = look_and_say([2,2,2])
val [1,1,2,2] = look_and_say([1,2,2])
val [3,1,2,2,1,1] = look_and_say([1,1,1,2,2,1]) *)

(* Task 5.2: Implement and document this function. *)
(* look_say_table: (int list * int) -> int list list *)
(* rEQUIrES: n is non-negative *)
(* ENSUrES: look_say_table(l,n) evaluates to a list of length n+1 of
 * repeated look_and_say lists, starting with l *)
 let rec look_say_table ((l: int list), (n: int)) : int list list = 
   if n = 0 then [l]
   else l :: look_say_table(look_and_say(l),n-1)

(* TESTING *)
(* val [[1]] = look_say_table([1],0)
val [[1],[1,1],[2,1],[1,2,1,1],[1,1,1,2,2,1],[3,1,2,2,1,1]] = look_say_table([1],5)
val [[],[]] = look_say_table([],1) *)

(* ---------------------------------------------------------------------- *)
(* SECTION 6 *)

(* add_to_each : int list * int -> int list
 * rEQUIrES: true
 * ENSUrES: add n to each element of the list l
 *
 * Examples:
 *
 * add_to_each (nil, 7) == nil
 * add_to_each (1::2::3::nil, 3) == 4::5::6::nil
 * add_to_each (6::5::4::nil, ~3) == 3::2::1::nil
 *)
let rec add_to_each ((l : int list), (n : int)) : int list =
    match l with
    | [] -> []
    | x::xs -> x + n :: add_to_each (xs, n)

(* Task 6.1: Implement and document this function. *)
(* prefixSum: int list -> int list *)
(* rEQUIrES: true *)
(* ENSUrES: prefixSum(l) evaluates to a list where the ith index element
            is the sum of the first i + 1 elements of l *)
let rec prefixSum (l : int list) : int list =
    match l with 
    | [] -> []
    | x::r -> x::add_to_each(prefixSum(r),x)

(* TESTING *)
(* val [] = prefixSum []
val [1,3,6] = prefixSum [1,2,3]
val [5,8,9] = prefixSum [5,3,1]
 *)
(* Task 6.3: Implement and document this function. *)
(* prefixSumHelp: int list * int -> int list
 * rEQUIrES: true 
 * ENSUrES: prefixSumHelp(l,n) evaluates to a list where the ith index element
 *          is the sum of the first i + 1 elements plus n 
*)
let rec prefixSumHelp ((l: int list), (n:int)) = 
  match l with 
  | [] -> []
  | x::r -> (x+n) :: prefixSumHelp(r,x+n)

(* TESTING *)
(* val [] = prefixSumHelp([],0)
val [2,4] = prefixSumHelp([1,2],1) *)

(* prefixSumFast: int list -> int list
 * rEQUIrES: true
 * ENSUrES: prefixSumFast(l) evaluates to a list where the ith index element
            is the sum of the first i + 1 elements of l *)

let prefixSumFast (l : int list) : int list = prefixSumHelp(l,0)    

(* TESTING *)(* 
val [] = prefixSumFast []
val [1,3,6] = prefixSumFast [1,2,3]
val [5,8,9] = prefixSumFast [5,3,1] *)
(* ---------------------------------------------------------------------- *)
(* SECTION 7 *)

(* Task 7.1: Implement and document this function. *)
(* subsequence: int list * int list -> bool
 * rEQUIrES: true
 * ENSUrES:subsequence(p,l) returns true if the first list is a subsequence of the second 
 * and returns false otherwise *)

let rec subsequence ((p: int list), (l: int list)): bool = 
  match p with
  | []    -> true
  | x::p' -> (match l with 
    | []    -> false
    | y::l' -> if x = y then subsequence(p',l') else subsequence(p,l') ) 

(* TESTING *)
(* val true = subsequence ([2,4],[1,2,3,4])
val true = subsequence ([1,2],[1,3,2]) 
val false = subsequence ([3,1],[1,3,2]) 
val true = subsequence ([],[5,3,4])  *)

(* Task 7.2: Implement and document this function. *)
(* helper: int list * int list -> bool
 * rEQUIrES: true
 * ENSUrES: helper(p,l) evaluates to true if l starts with p, false otherwise *)

let rec helper ((p: int list), (l: int list)): bool = 
  match (p, l) with
  | ([],_) -> true
  | (_,[]) -> false
  | (x::xs,y::l) -> if x=y then helper(xs,l) else false 

(* TESTING *)
(* val true = helper ([],[1])
val true = helper([1,2],[1,2,5])
val false = helper([1,2],[4,5]) *)

(* subrun: int list * int list -> bool
 * rEQUIrES: true
 * ENSUrES: subrun(p,l) returns true if the first list is a subrun of the second
 * and false otherwise *)
let rec subrun ((p: int list), (l: int list)): bool = 
  match (p, l) with
  | ([],_) -> true
  | (_,[]) -> false
  | (x::s,y::l) -> if (x=y && helper(s,l)) then true else subrun(x::s,l)

(* TESTING *)
(* 
val true = subrun ([1,2],[3,1,3,1,2,1])
val true = subrun ([2,3],[1,2,3,4])
val false = subrun ([2,4],[1,2,3,4,5]) 
val true = subrun ([2,3,4],[1,2,3,4,5]) 
val true = subrun ([],[1,2,3,4])  *)

(* ---------------------------------------------------------------------- *)
(* SECTION 8 *)

(* Task 8.1: Implement and document this function. *)
(* subset_sum: int list * int -> bool 
 * rEQUIrES: true
 * ENSUrES: subset_sum(l,s) returns true iff l has a subset that sums to s 
 * false otherwise*)
let rec subset_sum ((l: int list), (s: int)) : bool = 
  match l with
  | [] -> (s=0)
  | x::r -> subset_sum(r,s) || subset_sum(r,s-x)   
    

(* TESTING *)
(* val true = subset_sum([1,2,1],4)
val true = subset_sum([~6,10],4)
val false = subset_sum([1],7) *)

(* Task 8.2: Implement and document this function. *)
(* subset_sum_cert: int list * int -> bool
 * rEQUIrES: true
 * ENSUrES: subset_sum_cert(m, n) = (true, U) where U is a subset of m
 * which sums to n if U exists, (false, nil) otherwise *)

let rec subset_sum_cert ((m : int list), (s: int)) : bool * int list = 
  match m with
  | [] -> (s=0,[])
  | x::r -> let (b1,l1) = subset_sum_cert(r,s) in
            let (b2,l2) = subset_sum_cert(r,s-x) in 
              if b1 then (b1,r) else if b2 then (b2,x::r) else (false,[])
(* TESTING *)
(* val (true,[1,2,1]) = subset_sum_cert([1,2,1],4)
val (true,[~6,10]) = subset_sum_cert([~6,10],4)
val (false,[]) = subset_sum_cert([1],7) *)

