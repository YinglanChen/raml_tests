(* nat version of task 3 impreative; cannot satisfy the span *)
(* 
type 'a array = Rnat.t -> 'a ref
  tail = init_array (n-1) v 
  fun i -> if i = 0 then temp else tail (i-1)*)
type 'a array = Rnat.t -> 'a ref
exception OutOfBounds

(* Task 3.1
 * init_array : int -> 'a -> 'a array 
 * REQUIRES: n > 0
 * ENSURES: init-array n v creates a new array defined over the indices 0 
 *          through n-1, with all elements initialized to v
 *)

let rec init_array (n:Rnat.t) (v:'a): 'a array = 
  ifz n 
  (fun () -> raise OutOfBounds) (* requires n > 0 *)
  (fun n' -> 
    ifz n' 
    (fun () -> 
        (* singleton *)
        (fun i -> ifz i (fun () -> ref v) (fun _ -> raise OutOfBounds))
    )
    (fun _ -> 
        (* head is ref v, tail is recursive call *)
        let tail = init_array n' v in 
        (fun i -> ifz i (fun () -> ref v) (fun _ -> tail (i-1)))
    )
  )

(* Task 3.2
 * update : ’a array -> int * ’a -> unit
 * REQUIRES: i in bound
 * ENSURES: update a (i, v) updates the ith element of a to be v 
 *          if 0 <= i <= n-1, or raise exception OutOfBounds if i is out of 
 *          range
 *)
let update (a:'a array) ((i: int), (v: 'a)) : unit = 
  a i := v 
(* O(log n) work and span *)

(* Task 3.3
 * lookup : ’a array -> int -> 'a
 * REQUIRES: True
 * ENSURES: lookup a i evaluates to the ith element of a, or raise exception
 *          OutOfBounds if i is not inside the given array
 *)
let lookup (a: 'a array) (i:int):'a =
    !(a i)
(* O(log n) work and span *)