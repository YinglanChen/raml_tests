(* READ THIS COMMENT!
 *
 * In this file there are various lines marked by a comment either like so:
 *
 *    raise Fail "unimplemented"  
 *
 * or like so:
 *
 *    _ = raise Fail "unimplemented"  
 *
 * You do not need to delete these lines immediately, but they should be gone by
 * the time you hand in your homework. They are placeholders for your
 * implementations of the functions specified in the homework.  Without them,
 * this file would not load.
 *
 * If you remove such a line without implementing the function it is associated
 * with, this file will not load. Only remove such lines when you are ready to
 * implement their associated function.
 *
 *   Also notice that for some functions we specified the left parts of
 *   (one or more) function clauses, but for other functions we did not.
 *   You will need to decide what the function clauses should be in those cases.
 *
 * Remember to test your code! Place tests immediately following the function
 * you have written.
 *)

(* REQUIRES:  n, m >= 0
 * ENSURES:  add (n, m) ==> n + m
 *)
let rec add ((n : int), (m: int)) = if n = 0 then m 
  else let _ = Raml.tick 1.0 in 1 + add (n-1, m)

(* Task 5.1: Implement and document this function. *)
(* Note: You may want to pattern-match for different cases. *)
(* DOCUMENTATION GOES HERE *)
let rec mult ((x : int), (y : int)) : int = 
    if (x = 0 || y = 0) then 0
    else let _ = Raml.tick 1.0 in y + mult (x-1, y) 

(* Task 5.2: Implement and document this function. *)
(* DOCUMENTATION GOES HERE *)
let rec pascal ((i : int), (j : int)) : int = 
    if (j = 0 || i-j = 0) then 1 
    else pascal(i-1,j-1) + pascal(i-1,j)

(*TESTING GOES HERE*)

(* Task 5.3: Implement and document this function. *)
let rec divmod ( (n,d) : int * int) : int * int = 
    if n < d then (0,n)
    else let (x,y) = divmod(n-d,d)  in (x+1,y)

(* Task 5.4: Implement this function. *)
(* DOCUMENTATION GOES HERE *)
let rec has_no_factor ((x : int), (n : int)): bool = 
    if x = 1 then true 
    else if n mod x = 0 then false
         else has_no_factor(x-1,n)

let is_prime (n : int) : bool =
    if (n = 0 || n = 1) then false 
    else has_no_factor(n-1,n)

let _ = is_prime 7;;

