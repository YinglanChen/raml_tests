exception DivideByZero
(* REQUIRES:  n, m >= 0
 * ENSURES:  add (n, m) ==> n + m
 *)
let rec add (n, m) = 
    Rnat.ifz n 
        ((fun () -> m))
        ((fun n' -> let () = Raml.tick 1.0 in succ(add (n', m)) ))

  (* Raml.tick 1.0 in 1 + add (n-1, m) *)

let _ = add (succ(succ(Rnat.zero)),succ(Rnat.zero));;
(* Task 5.1: Implement and document this function. *)
(* Note: You may want to pattern-match for different cases. *)
(* DOCUMENTATION GOES HERE *)
let rec mult (x, y) = 
    Rnat.ifz x 
        ((fun () -> Rnat.zero))
        ((fun x' -> (Rnat.ifz y 
            ((fun () -> Rnat.zero))
            ((fun y' -> 
                let _ = Raml.tick 1.0 in 
                let prod' = mult (x', y) in 
                add(y, prod') 
                (* use Rnat.add if dont want to count ticks in add *)
            )))
        ))

let _ = mult (succ(succ(Rnat.zero)),succ(Rnat.zero));;

(* Task 5.2: Implement and document this function. *)
(* if i< j Rnat.minus raise Invalid_argument  *)
let rec pascal ((i: Rnat.t), (j: Rnat.t)) = 
    Rnat.ifz j 
        ((fun () -> succ(Rnat.zero)))
        ((fun i' -> 
            ( let (i_minus_j,_) = (Rnat.minus i j) in 
              (Rnat.ifz i_minus_j
              ((fun () -> succ(Rnat.zero)))
              ((fun j' -> let _ = Raml.tick 2.0 in 
                          add (pascal (i',j'), pascal(i', j)))))
            )
        ))

let _ = pascal (succ(succ(Rnat.zero)),succ(Rnat.zero));;
(*TESTING GOES HERE*)

(* Task 5.3: Implement and document this function. *)
(* no good way to do integer compare in Rnat  *)

let rec divmod (n,d) = 
  Rnat.ifz d 
  ((fun () -> raise DivideByZero))
  ((fun d' -> 
    ( Rnat.ifz n 
      ((fun () -> (Rnat.zero, Rnat.zero)))
      ((fun n' -> 
        if (Rnat.to_int n) < (Rnat.to_int d) then (Rnat.zero, n)
        else  let (diff, _) = Rnat.minus n' d' in
              let (x,y) = divmod(diff, d) in (Rnat.succ x, y)
      ))
    )
    
  ))
  (* if n < d then (0,n) *)
  (* else let (x,y) = divmod(n-d,d) in (x+1,y) *)

(* Task 5.4: Implement this function. *)
(* test if n has any factor smaller or equal to n-1  *)
(* DOCUMENTATION GOES HERE *)
let rec has_no_factor (x,n): bool = 
    let _ = Raml.tick 1.0 in (
    Rnat.ifz x ((fun () -> false))
    ((fun x' -> Rnat.ifz x' ((fun () -> true)) 
                ((fun x'' -> let (_, remainder,_) = Rnat.div_mod n x in 
                  (Rnat.ifz remainder ((fun () -> false)) ((fun r' -> has_no_factor(x', n))))
                ))
    )) )

(*     if x = 1 then true 
    else if n mod x = 0 then false
         else has_no_factor(x-1,n) *)

let is_prime (n) =
  Rnat.ifz n ((fun () -> false))
  (( fun n' -> 
    ( Rnat.ifz n' ((fun () -> false))
        ((fun x' -> 
        ( Rnat.ifz x' ((fun () -> false)) 
          ((fun _ -> has_no_factor(n', n) ))
        )
        ))
(*         if (n = 0 || n = 1) then false 
        else has_no_factor(n-1,n) *)
   )
  ))

let _ = is_prime (succ(succ(succ(succ(succ(succ(succ(Rnat.zero))))))));;

